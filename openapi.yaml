openapi: 3.0.3
info:
  title: Crypto Bot API
  description: |
    A comprehensive API for managing cryptocurrency wallets and operations.
    This API provides endpoints for wallet creation, management, balance tracking,
    and blockchain interactions.
  version: 1.0.0
  contact:
    name: Crypto Bot API Support
  license:
    name: MIT
servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.cryptobot.com
    description: Production server

paths:
  /health:
    get:
      summary: Health Check
      description: Check the health status of the API and its services
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                success: true
                data:
                  status: "ok"
                  timestamp: "2024-01-15T10:30:00.000Z"
                  routes:
                    wallet: true
                    transaction: true
                    strategy: true
                  environment: "development"

  /health/solana:
    get:
      summary: Solana Health Check
      description: Check the health status of Solana RPC connections and services
      operationId: solanaHealthCheck
      tags:
        - System
      responses:
        '200':
          description: Solana service health retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolanaHealthResponse'
              example:
                success: true
                data:
                  status: "healthy"
                  activeRpcUrl: "https://mainnet.helius-rpc.com/?api-key=..."
                  totalConnections: 2
                  healthyConnections: 2
                  connections:
                    - url: "https://mainnet.helius-rpc.com/?api-key=..."
                      healthy: true
                      latencyMs: 45
                      lastChecked: "2024-01-15T10:30:00.000Z"
                      errorCount: 0
                      lastError: null
                    - url: "https://api.mainnet-beta.solana.com"
                      healthy: true
                      latencyMs: 120
                      lastChecked: "2024-01-15T10:30:00.000Z"
                      errorCount: 0
                      lastError: null
        '500':
          $ref: '#/components/responses/ServerError'

  /health/db:
    get:
      summary: Database Health Check
      description: Check the health status of the database connection and performance
      operationId: dbHealthCheck
      tags:
        - System
      responses:
        '200':
          description: Database health retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DbHealthResponse'
              example:
                success: true
                data:
                  status: "healthy"
                  responseTimeMs: 15
                  tableCount: 4
                  connection: "active"
                  database: "sqlite"
                  timestamp: "2024-01-15T10:30:00.000Z"
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/wallets:
    get:
      summary: List Wallets
      description: Retrieve a list of all wallets with optional filtering
      operationId: listWallets
      tags:
        - Wallets
      parameters:
        - name: activeOnly
          in: query
          description: Filter to show only active wallets
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of wallets retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWalletsResponse'
              example:
                success: true
                data:
                  wallets:
                    - id: 1
                      publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                      label: "Main Wallet"
                      isActive: true
                      createdAt: "2024-01-15T10:30:00.000Z"
                      solBalance: 1.5
                      wsolBalance: 0.0
                      totalBalance: 1.5
                      lastBalanceUpdate: "2024-01-15T10:30:00.000Z"
                      balanceStatus: "current"
                  meta:
                    totalWallets: 1
                    activeWallets: 1
                    inactiveWallets: 0
                    walletsWithNullBalance: 0
                    refreshed: true
                    activeOnly: false
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create Wallets
      description: Create one or more new wallets
      operationId: createWallets
      tags:
        - Wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletsRequest'
            example:
              count: 2
              label: "Trading Wallets"
      responses:
        '201':
          description: Wallets created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWalletsResponse'
              example:
                success: true
                data:
                  wallets:
                    - id: 1
                      publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                      label: "Trading Wallets"
                      isActive: true
                      createdAt: "2024-01-15T10:30:00.000Z"
                  meta:
                    requested: 2
                    created: 2
                    errorCount: 0
                    errors: []
        '206':
          description: Partial success - some wallets created with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWalletsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Bulk Edit Wallets
      description: Update multiple wallets at once
      operationId: bulkEditWallets
      tags:
        - Wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkEditWalletsRequest'
            example:
              walletIds: [1, 2, 3]
              updates:
                label: "Updated Label"
                isActive: true
      responses:
        '200':
          description: Wallets updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkEditWalletsResponse'
              example:
                success: true
                data:
                  results:
                    total: 3
                    successful: 2
                    failed: 1
                    successfulWallets:
                      - id: 1
                        publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                        label: "Updated Label"
                        isActive: true
                    failedWallets:
                      - id: 3
                        error: "Wallet not found"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/wallets/import:
    post:
      summary: Import Wallet
      description: Import an existing wallet using its secret key
      operationId: importWallet
      tags:
        - Wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportWalletRequest'
            example:
              secretKey: "5Kb8kLf9zgWQnogidDA76MzPL6TsMaY6fHj4s4w8z2x5vU8VqK"
              label: "Imported Wallet"
      responses:
        '201':
          description: Wallet imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportWalletResponse'
              example:
                success: true
                data:
                  wallet:
                    id: 1
                    publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                    label: "Imported Wallet"
                    isActive: true
                    createdAt: "2024-01-15T10:30:00.000Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/wallets/{publicKey}:
    get:
      summary: Get Wallet
      description: Retrieve a specific wallet by its public key
      operationId: getWallet
      tags:
        - Wallets
      parameters:
        - name: publicKey
          in: path
          required: true
          description: The public key of the wallet
          schema:
            type: string
            pattern: '^[1-9A-HJ-NP-Za-km-z]{44}$'
            example: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
      responses:
        '200':
          description: Wallet retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWalletResponse'
              example:
                success: true
                data:
                  wallet:
                    id: 1
                    publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                    label: "Main Wallet"
                    isActive: true
                    createdAt: "2024-01-15T10:30:00.000Z"
                    solBalance: 1.5
                    wsolBalance: 0.0
                    totalBalance: 1.5
                    lastBalanceUpdate: "2024-01-15T10:30:00.000Z"
                    balanceStatus: "current"
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/wallets/balance/refresh:
    post:
      summary: Refresh Wallet Balances
      description: Refresh the balance information for multiple wallets
      operationId: refreshWalletBalances
      tags:
        - Wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshWalletBalancesRequest'
            example:
              walletIds: [1, 2, 3]
      responses:
        '200':
          description: Wallet balances refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshWalletBalancesResponse'
              example:
                success: true
                data:
                  refreshed: 2
                  failed: 1
                  total: 3
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/pump-fun/create-and-buy:
    post:
      summary: Create and Buy Token
      description: Create a new token on pump.fun and perform the initial buy
      operationId: createAndBuyToken
      tags:
        - Pump Fun
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndBuyRequest'
            example:
              walletId: 1
              tokenMeta:
                name: "My Token"
                symbol: "MTK"
                uri: "https://example.com/metadata.json"
              buyAmountSol: 0.1
      responses:
        '201':
          description: Token created and bought successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAndBuyResponse'
              example:
                success: true
                data:
                  transaction:
                    signature: "5Kb8kLf9zgWQnogidDA76MzPL6TsMaY6fHj4s4w8z2x5vU8VqK"
                    slot: 123456789
                  mint:
                    publicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                    secretKey: "5Kb8kLf9zgWQnogidDA76MzPL6TsMaY6fHj4s4w8z2x5vU8VqK"
                  curve:
                    virtualSolReserves: "1000000000000"
                    virtualTokenReserves: "1000000000000"
                    realSolReserves: "1000000000000"
                    realTokenReserves: "1000000000000"
                  pumpLink: "https://pump.fun/9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/pump-fun/buy:
    post:
      summary: Buy Token
      description: Buy an existing token on pump.fun
      operationId: buyToken
      tags:
        - Pump Fun
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyTokenRequest'
            example:
              walletId: 1
              mintPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
              buyAmountSol: 0.1
      responses:
        '200':
          description: Token bought successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyTokenResponse'
              example:
                success: true
                data:
                  transaction:
                    signature: "5Kb8kLf9zgWQnogidDA76MzPL6TsMaY6fHj4s4w8z2x5vU8VqK"
                    slot: 123456789
                  curve:
                    virtualSolReserves: "1000000000000"
                    virtualTokenReserves: "1000000000000"
                    realSolReserves: "1000000000000"
                    realTokenReserves: "1000000000000"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/pump-fun/sell:
    post:
      summary: Sell Token
      description: Sell tokens on pump.fun
      operationId: sellToken
      tags:
        - Pump Fun
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellTokenRequest'
            examples:
              sellBySolValue:
                summary: Sell by SOL value
                value:
                  walletId: 1
                  mintPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  sellAmountSol: 0.1
              sellByTokenAmount:
                summary: Sell by token amount
                value:
                  walletId: 1
                  mintPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  sellAmountSPL: 1000000
      responses:
        '200':
          description: Token sold successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SellTokenResponse'
              example:
                success: true
                data:
                  transaction:
                    signature: "5Kb8kLf9zgWQnogidDA76MzPL6TsMaY6fHj4s4w8z2x5vU8VqK"
                    slot: 123456789
                  curve:
                    virtualSolReserves: "1000000000000"
                    virtualTokenReserves: "1000000000000"
                    realSolReserves: "1000000000000"
                    realTokenReserves: "1000000000000"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/pump-fun/balance:
    post:
      summary: Get Token Balance
      description: Get the SPL token balance for a wallet and mint
      operationId: getTokenBalance
      tags:
        - Pump Fun
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTokenBalanceRequest'
            example:
              walletId: 1
              mintPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
      responses:
        '200':
          description: Token balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenBalanceResponse'
              example:
                success: true
                data:
                  walletId: 1
                  walletPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  mintPublicKey: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  balance: 1000000
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # Pump Fun Schemas
    CreateAndBuyRequest:
      type: object
      required:
        - walletId
        - tokenMeta
        - buyAmountSol
      properties:
        walletId:
          type: integer
          minimum: 1
          description: ID of the wallet to use for the transaction
        tokenMeta:
          $ref: '#/components/schemas/TokenMetadata'
        buyAmountSol:
          type: number
          minimum: 0.000001
          maximum: 1000
          description: Amount of SOL to spend on the initial buy

    TokenMetadata:
      type: object
      required:
        - name
        - symbol
        - uri
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 32
          description: Token name
        symbol:
          type: string
          minLength: 1
          maxLength: 10
          description: Token symbol
        uri:
          type: string
          format: uri
          maxLength: 200
          description: Token metadata URI

    BuyTokenRequest:
      type: object
      required:
        - walletId
        - mintPublicKey
        - buyAmountSol
      properties:
        walletId:
          type: integer
          minimum: 1
          description: ID of the wallet to use for the transaction
        mintPublicKey:
          type: string
          pattern: '^[1-9A-HJ-NP-Za-km-z]{44}$'
          description: Public key of the token mint
        buyAmountSol:
          type: number
          minimum: 0.000001
          maximum: 1000
          description: Amount of SOL to spend on the buy

    SellTokenRequest:
      type: object
      required:
        - walletId
        - mintPublicKey
      properties:
        walletId:
          type: integer
          minimum: 1
          description: ID of the wallet to use for the transaction
        mintPublicKey:
          type: string
          pattern: '^[1-9A-HJ-NP-Za-km-z]{44}$'
          description: Public key of the token mint
        sellAmountSol:
          type: number
          minimum: 0.000001
          maximum: 1000
          description: Amount of SOL worth of tokens to sell (mutually exclusive with sellAmountSPL)
        sellAmountSPL:
          type: number
          minimum: 1
          maximum: 1000000000
          description: Number of SPL tokens to sell (mutually exclusive with sellAmountSol)
      oneOf:
        - required: [sellAmountSol]
        - required: [sellAmountSPL]
      additionalProperties: false

    GetTokenBalanceRequest:
      type: object
      required:
        - walletId
        - mintPublicKey
      properties:
        walletId:
          type: integer
          minimum: 1
          description: ID of the wallet to check balance for
        mintPublicKey:
          type: string
          pattern: '^[1-9A-HJ-NP-Za-km-z]{44}$'
          description: Public key of the token mint

    CreateAndBuyResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateAndBuyData'

    CreateAndBuyData:
      type: object
      required:
        - transaction
        - mint
        - curve
        - pumpLink
      properties:
        transaction:
          $ref: '#/components/schemas/TransactionResult'
        mint:
          $ref: '#/components/schemas/MintInfo'
        curve:
          $ref: '#/components/schemas/BondingCurve'
        pumpLink:
          type: string
          format: uri
          description: Link to the token on pump.fun

    BuyTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/BuyTokenData'

    BuyTokenData:
      type: object
      required:
        - transaction
        - curve
      properties:
        transaction:
          $ref: '#/components/schemas/TransactionResult'
        curve:
          $ref: '#/components/schemas/BondingCurve'

    SellTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SellTokenData'

    SellTokenData:
      type: object
      required:
        - transaction
        - curve
      properties:
        transaction:
          $ref: '#/components/schemas/TransactionResult'
        curve:
          $ref: '#/components/schemas/BondingCurve'

    GetTokenBalanceResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/GetTokenBalanceData'

    GetTokenBalanceData:
      type: object
      required:
        - walletId
        - walletPublicKey
        - mintPublicKey
        - balance
      properties:
        walletId:
          type: integer
          description: ID of the wallet
        walletPublicKey:
          type: string
          description: Public key of the wallet
        mintPublicKey:
          type: string
          description: Public key of the token mint
        balance:
          type: number
          description: Token balance in smallest units

    TransactionResult:
      type: object
      required:
        - signature
        - slot
      properties:
        signature:
          type: string
          description: Transaction signature
        slot:
          type: integer
          description: Slot number when transaction was processed

    MintInfo:
      type: object
      required:
        - publicKey
        - secretKey
      properties:
        publicKey:
          type: string
          description: Public key of the mint
        secretKey:
          type: string
          description: Secret key of the mint

    BondingCurve:
      type: object
      required:
        - virtualSolReserves
        - virtualTokenReserves
        - realSolReserves
        - realTokenReserves
      properties:
        virtualSolReserves:
          type: string
          description: Virtual SOL reserves
        virtualTokenReserves:
          type: string
          description: Virtual token reserves
        realSolReserves:
          type: string
          description: Real SOL reserves
        realTokenReserves:
          type: string
          description: Real token reserves

    # Base Response Structure
    ApiResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        data:
          type: object
          description: Response data (present when success is true)
        message:
          type: string
          description: Error message (present when success is false)
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
          description: Detailed error information (present when success is false)

    ErrorDetail:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message

    # Health Check Schemas
    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/HealthData'

    HealthData:
      type: object
      required:
        - status
        - timestamp
        - routes
        - environment
      properties:
        status:
          type: string
          enum: [ok]
          description: Health status
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
        routes:
          $ref: '#/components/schemas/RouteStatus'
        environment:
          type: string
          description: Current environment

    RouteStatus:
      type: object
      required:
        - wallet
        - transaction
        - strategy
      properties:
        wallet:
          type: boolean
          description: Wallet service status
        transaction:
          type: boolean
          description: Transaction service status
        strategy:
          type: boolean
          description: Strategy service status

    # Solana Health Check Schemas
    SolanaHealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SolanaHealthData'

    SolanaHealthData:
      type: object
      required:
        - status
        - activeRpcUrl
        - totalConnections
        - healthyConnections
        - connections
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, error]
          description: Overall Solana service health status
        activeRpcUrl:
          type: string
          description: Currently active RPC endpoint URL
        totalConnections:
          type: integer
          description: Total number of configured RPC connections
        healthyConnections:
          type: integer
          description: Number of healthy RPC connections
        connections:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionStatus'
          description: Status of all RPC connections
        error:
          type: string
          description: Error message (present when status is error)

    ConnectionStatus:
      type: object
      required:
        - url
        - healthy
        - lastChecked
        - errorCount
      properties:
        url:
          type: string
          description: RPC endpoint URL
        healthy:
          type: boolean
          description: Whether the connection is healthy
        latencyMs:
          type: integer
          description: Connection latency in milliseconds
        lastChecked:
          type: string
          format: date-time
          description: Last health check timestamp
        errorCount:
          type: integer
          description: Number of consecutive errors
        lastError:
          type: string
          description: Last error message (if any)

    # Database Health Check Schemas
    DbHealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/DbHealthData'

    DbHealthData:
      type: object
      required:
        - status
        - responseTimeMs
        - tableCount
        - connection
        - database
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Database health status
        responseTimeMs:
          type: integer
          description: Database query response time in milliseconds
        tableCount:
          type: integer
          description: Number of tables in the database
        connection:
          type: string
          enum: [active, failed]
          description: Database connection status
        database:
          type: string
          description: Database type
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
        error:
          type: string
          description: Error message (present when status is unhealthy)

    # Wallet Schemas
    Wallet:
      type: object
      required:
        - id
        - publicKey
        - isActive
        - createdAt
      properties:
        id:
          type: integer
          description: Unique wallet identifier
        publicKey:
          type: string
          pattern: '^[1-9A-HJ-NP-Za-km-z]{44}$'
          description: Base58 encoded public key
        label:
          type: string
          description: Optional wallet label
        isActive:
          type: boolean
          description: Whether the wallet is active
        createdAt:
          type: string
          format: date-time
          description: Wallet creation timestamp
        solBalance:
          type: number
          description: SOL balance in SOL units
        wsolBalance:
          type: number
          description: Wrapped SOL balance in SOL units
        totalBalance:
          type: number
          description: Total balance (SOL + WSOL) in SOL units
        lastBalanceUpdate:
          type: string
          format: date-time
          description: Last balance update timestamp
        balanceStatus:
          type: string
          description: Current balance status

    # Request Schemas
    CreateWalletsRequest:
      type: object
      required: []
      properties:
        count:
          type: integer
          minimum: 1
          default: 1
          description: Number of wallets to create
        label:
          type: string
          description: Optional label for the wallets

    ImportWalletRequest:
      type: object
      required:
        - secretKey
      properties:
        secretKey:
          type: string
          minLength: 87
          maxLength: 88
          pattern: '^[1-9A-HJ-NP-Za-km-z]{87,88}$'
          description: Base58 encoded secret key
        label:
          type: string
          description: Optional wallet label

    BulkEditWalletsRequest:
      type: object
      required:
        - walletIds
        - updates
      properties:
        walletIds:
          type: array
          items:
            type: integer
            minimum: 1
          minItems: 1
          maxItems: 50
          description: Array of wallet IDs to update
        updates:
          $ref: '#/components/schemas/WalletUpdates'

    WalletUpdates:
      type: object
      properties:
        label:
          type: string
          description: New wallet label
        isActive:
          type: boolean
          description: New active status
      additionalProperties: false

    RefreshWalletBalancesRequest:
      type: object
      required:
        - walletIds
      properties:
        walletIds:
          type: array
          items:
            type: integer
            minimum: 1
          minItems: 1
          maxItems: 100
          description: Array of wallet IDs to refresh

    # Response Schemas
    ListWalletsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ListWalletsData'

    ListWalletsData:
      type: object
      required:
        - wallets
        - meta
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/Wallet'
        meta:
          $ref: '#/components/schemas/WalletListMeta'

    WalletListMeta:
      type: object
      required:
        - totalWallets
        - activeWallets
        - inactiveWallets
        - walletsWithNullBalance
        - refreshed
        - activeOnly
      properties:
        totalWallets:
          type: integer
          description: Total number of wallets
        activeWallets:
          type: integer
          description: Number of active wallets
        inactiveWallets:
          type: integer
          description: Number of inactive wallets
        walletsWithNullBalance:
          type: integer
          description: Number of wallets with null balance
        refreshed:
          type: boolean
          description: Whether balances were refreshed
        activeOnly:
          type: boolean
          description: Whether only active wallets were requested

    CreateWalletsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateWalletsData'

    CreateWalletsData:
      type: object
      required:
        - wallets
        - meta
      properties:
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/Wallet'
        meta:
          $ref: '#/components/schemas/CreateWalletsMeta'

    CreateWalletsMeta:
      type: object
      required:
        - requested
        - created
        - errorCount
        - errors
      properties:
        requested:
          type: integer
          description: Number of wallets requested
        created:
          type: integer
          description: Number of wallets successfully created
        errorCount:
          type: integer
          description: Number of errors encountered
        errors:
          type: array
          items:
            type: string
          description: Array of error messages

    ImportWalletResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ImportWalletData'

    ImportWalletData:
      type: object
      required:
        - wallet
      properties:
        wallet:
          $ref: '#/components/schemas/Wallet'

    GetWalletResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/GetWalletData'

    GetWalletData:
      type: object
      required:
        - wallet
      properties:
        wallet:
          $ref: '#/components/schemas/Wallet'

    BulkEditWalletsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/BulkEditWalletsData'

    BulkEditWalletsData:
      type: object
      required:
        - results
      properties:
        results:
          $ref: '#/components/schemas/BulkEditResults'

    BulkEditResults:
      type: object
      required:
        - total
        - successful
        - failed
        - successfulWallets
        - failedWallets
      properties:
        total:
          type: integer
          description: Total number of wallets processed
        successful:
          type: integer
          description: Number of successfully updated wallets
        failed:
          type: integer
          description: Number of failed updates
        successfulWallets:
          type: array
          items:
            $ref: '#/components/schemas/Wallet'
          description: Successfully updated wallets
        failedWallets:
          type: array
          items:
            $ref: '#/components/schemas/FailedWallet'
          description: Failed wallet updates

    FailedWallet:
      type: object
      required:
        - id
        - error
      properties:
        id:
          type: integer
          description: Wallet ID that failed
        error:
          type: string
          description: Error message

    RefreshWalletBalancesResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RefreshWalletBalancesData'

    RefreshWalletBalancesData:
      type: object
      required:
        - refreshed
        - failed
        - total
      properties:
        refreshed:
          type: integer
          description: Number of successfully refreshed wallets
        failed:
          type: integer
          description: Number of failed refreshes
        total:
          type: integer
          description: Total number of wallets processed

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "Invalid request data"
            errors:
              - message: "count must be a positive integer"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "Wallet with public key 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM not found"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            message: "Internal server error"

tags:
  - name: System
    description: System health and status endpoints
  - name: Wallets
    description: Wallet management and operations
  - name: Pump Fun
    description: Pump.fun token creation and trading operations
